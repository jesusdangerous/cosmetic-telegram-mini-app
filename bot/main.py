from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           WebAppInfo, InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
from dotenv import load_dotenv
import os
import asyncio

load_dotenv()
api = os.getenv('YOUR_TOKEN')

bot = Bot(token=api)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        phone TEXT,
        full_name TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_referral_sources (
        user_id INTEGER PRIMARY KEY,
        from_friends INTEGER DEFAULT 0,
        from_ads INTEGER DEFAULT 0,
        choice3 INTEGER DEFAULT 0,
        choice4 INTEGER DEFAULT 0,
        choice5 INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_goals (
        user_id INTEGER PRIMARY KEY,
        analyze_compositions INTEGER DEFAULT 0,
        healthy_lifestyle INTEGER DEFAULT 0,
        expert_communication INTEGER DEFAULT 0,
        skin_improvement INTEGER DEFAULT 0,
        compare_products INTEGER DEFAULT 0,
        other_goal INTEGER DEFAULT 0,
        other_goal_text TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')
conn.commit()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_phone_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
        KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    )


def get_mini_app_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã",
            web_app=WebAppInfo(url="https://–Ω–∞—à-mini-app-—Å–∞–π—Ç.com")
        )
    )


def get_referral_keyboard(selected_sources=None):
    if selected_sources is None:
        selected_sources = []

    buttons = [
        [
            InlineKeyboardButton(
                "–û—Ç –∑–Ω–∞–∫–æ–º—ã—Ö‚úÖ" if "friends" in selected_sources else "–û—Ç –∑–Ω–∞–∫–æ–º—ã—Ö",
                callback_data="source_friends"
            ),
            InlineKeyboardButton(
                "–†–µ–∫–ª–∞–º–∞‚úÖ" if "ads" in selected_sources else "–†–µ–∫–ª–∞–º–∞",
                callback_data="source_ads"
            )
        ],
        [
            InlineKeyboardButton(
                "–í—ã–±–æ—Ä 3‚úÖ" if "choice3" in selected_sources else "–í—ã–±–æ—Ä 3",
                callback_data="source_choice3"
            ),
            InlineKeyboardButton(
                "–í—ã–±–æ—Ä 4‚úÖ" if "choice4" in selected_sources else "–í—ã–±–æ—Ä 4",
                callback_data="source_choice4"
            )
        ],
        [
            InlineKeyboardButton(
                "–í—ã–±–æ—Ä 5‚úÖ" if "choice5" in selected_sources else "–í—ã–±–æ—Ä 5",
                callback_data="source_choice5"
            )
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="source_continue")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_goals_keyboard(selected_goals=None, other_filled=False):
    if selected_goals is None:
        selected_goals = []

    buttons = [
        [
            InlineKeyboardButton(
                "–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–æ–≤‚úÖ" if "analyze" in selected_goals else "–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–æ–≤",
                callback_data="goal_analyze"
            ),
            InlineKeyboardButton(
                "–ó–û–ñ‚úÖ" if "healthy" in selected_goals else "–ó–û–ñ",
                callback_data="goal_healthy"
            )
        ],
        [
            InlineKeyboardButton(
                "–û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º‚úÖ" if "expert" in selected_goals else "–û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º",
                callback_data="goal_expert"
            ),
            InlineKeyboardButton(
                "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–∂–∏‚úÖ" if "skin" in selected_goals else "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–∂–∏",
                callback_data="goal_skin"
            )
        ],
        [
            InlineKeyboardButton(
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–≤‚úÖ" if "compare" in selected_goals else "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–≤",
                callback_data="goal_compare"
            ),
            InlineKeyboardButton(
                "–î—Ä—É–≥–æ–µ‚úÖ" if other_filled else "–î—Ä—É–≥–æ–µ",
                callback_data="goal_other" if not other_filled else "no_action"
            )
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="goal_continue")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_full_name = State()
    waiting_for_referral_source = State()
    waiting_for_goal = State()
    waiting_for_other_goal_text = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start'])
async def starting(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–ú–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã:",
            reply_markup=get_mini_app_keyboard()
        )
    else:
        await message.answer(
            "üìù –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞–º –Ω—É–∂–Ω–∞ –≤–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_keyboard()
        )
        await RegistrationStates.waiting_for_phone.set()


@dp.message_handler(content_types=types.ContentType.CONTACT, state=RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone=phone_number)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
    await RegistrationStates.waiting_for_full_name.set()


@dp.message_handler(state=RegistrationStates.waiting_for_full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    phone_number = data.get('phone')

    cursor.execute("INSERT INTO users (user_id, phone, full_name) VALUES (?, ?, ?)",
                   (user_id, phone_number, full_name))
    cursor.execute("INSERT INTO user_referral_sources (user_id) VALUES (?)", (user_id,))
    cursor.execute("INSERT INTO user_goals (user_id) VALUES (?)", (user_id,))
    conn.commit()

    await message.answer(
        "üì¢ –û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å?",
        reply_markup=get_referral_keyboard()
    )
    await RegistrationStates.waiting_for_referral_source.set()


@dp.callback_query_handler(lambda c: c.data.startswith('source_'), state=RegistrationStates.waiting_for_referral_source)
async def process_referral_source(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    source_type = callback.data.split('_')[1]

    column_mapping = {
        'friends': 'from_friends',
        'ads': 'from_ads',
        'choice3': 'choice3',
        'choice4': 'choice4',
        'choice5': 'choice5'
    }

    try:
        if source_type == "continue":
            await callback.message.edit_text("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            await callback.message.answer(
                "üéØ –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
                reply_markup=get_goals_keyboard()
            )
            await RegistrationStates.waiting_for_goal.set()
            await callback.answer()
            return

        db_column = column_mapping.get(source_type)
        if not db_column:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", show_alert=True)
            return

        cursor.execute(f"SELECT {db_column} FROM user_referral_sources WHERE user_id = ?", (user_id,))
        current_state = cursor.fetchone()[0]
        new_state = 0 if current_state else 1

        cursor.execute(f"UPDATE user_referral_sources SET {db_column} = ? WHERE user_id = ?",
                       (new_state, user_id))
        conn.commit()

        cursor.execute("""
            SELECT from_friends, from_ads, choice3, choice4, choice5 
            FROM user_referral_sources WHERE user_id = ?
        """, (user_id,))
        sources = cursor.fetchone()
        selected = []
        if sources[0]: selected.append("friends")
        if sources[1]: selected.append("ads")
        if sources[2]: selected.append("choice3")
        if sources[3]: selected.append("choice4")
        if sources[4]: selected.append("choice5")

        await callback.message.edit_reply_markup(
            reply_markup=get_referral_keyboard(selected))

        button_names = {
            'friends': '–û—Ç –∑–Ω–∞–∫–æ–º—ã—Ö',
            'ads': '–†–µ–∫–ª–∞–º–∞',
            'choice3': '–í—ã–±–æ—Ä 3',
            'choice4': '–í—ã–±–æ—Ä 4',
            'choice5': '–í—ã–±–æ—Ä 5'
        }
        action = "–≤—ã–±—Ä–∞–Ω" if new_state else "–æ—Ç–º–µ–Ω–µ–Ω"
        await callback.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{button_names.get(source_type, source_type)}' {action}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@dp.callback_query_handler(lambda c: c.data.startswith('goal_'), state=RegistrationStates.waiting_for_goal)
async def process_goals(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    goal_type = callback.data.split('_')[1]

    if goal_type == "no_action":
        await callback.answer()
        return

    column_mapping = {
        'analyze': 'analyze_compositions',
        'healthy': 'healthy_lifestyle',
        'expert': 'expert_communication',
        'skin': 'skin_improvement',
        'compare': 'compare_products',
        'other': 'other_goal'
    }

    try:
        if goal_type == "continue":
            await callback.message.edit_text("‚úÖ –í–∞—à–∏ —Ü–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            await finish_registration(callback, user_id)
            await state.finish()
            return

        if goal_type == "other":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏
            await callback.message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª–∏
            msg = await callback.message.answer(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —Å –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=types.ReplyKeyboardRemove()
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            async with state.proxy() as data:
                data['goal_request_message'] = msg.message_id

            await RegistrationStates.waiting_for_other_goal_text.set()
            await callback.answer()
            return

        db_column = column_mapping.get(goal_type)
        if not db_column:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å", show_alert=True)
            return

        cursor.execute(f"SELECT {db_column} FROM user_goals WHERE user_id = ?", (user_id,))
        current_state = cursor.fetchone()[0]
        new_state = 0 if current_state else 1

        cursor.execute(f"UPDATE user_goals SET {db_column} = ? WHERE user_id = ?",
                       (new_state, user_id))
        conn.commit()

        await update_goals_keyboard(callback, user_id)

        button_names = {
            'analyze': '–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–æ–≤',
            'healthy': '–ó–û–ñ',
            'expert': '–û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º',
            'skin': '–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–∂–∏',
            'compare': '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–≤'
        }
        action = "–≤—ã–±—Ä–∞–Ω–∞" if new_state else "–æ—Ç–º–µ–Ω–µ–Ω–∞"
        await callback.answer(f"–¶–µ–ª—å '{button_names.get(goal_type)}' {action}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@dp.message_handler(state=RegistrationStates.waiting_for_other_goal_text)
async def process_other_goal_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    other_text = message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
    async with state.proxy() as data:
        if 'goal_request_message' in data:
            try:
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=data['goal_request_message']
                )
            except:
                pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º
    await message.delete()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ "–î—Ä—É–≥–æ–µ" –≤—ã–±—Ä–∞–Ω–æ
    cursor.execute("""
        UPDATE user_goals 
        SET other_goal = 1, other_goal_text = ?
        WHERE user_id = ?
    """, (other_text, user_id))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_msg = await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    cursor.execute("""
        SELECT analyze_compositions, healthy_lifestyle, expert_communication,
               skin_improvement, compare_products, other_goal
        FROM user_goals WHERE user_id = ?
    """, (user_id,))
    goals = cursor.fetchone()

    selected = []
    if goals[0]: selected.append("analyze")
    if goals[1]: selected.append("healthy")
    if goals[2]: selected.append("expert")
    if goals[3]: selected.append("skin")
    if goals[4]: selected.append("compare")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ü–µ–ª–µ–π
    await message.answer(
        "üéØ –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
        reply_markup=get_goals_keyboard(selected, other_filled=True)
    )

    # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)
    await confirm_msg.delete()

    await RegistrationStates.waiting_for_goal.set()


async def update_goals_keyboard(callback: types.CallbackQuery, user_id: int):
    cursor.execute("""
        SELECT analyze_compositions, healthy_lifestyle, expert_communication,
               skin_improvement, compare_products, other_goal, other_goal_text
        FROM user_goals WHERE user_id = ?
    """, (user_id,))
    goals = cursor.fetchone()

    selected = []
    if goals[0]: selected.append("analyze")
    if goals[1]: selected.append("healthy")
    if goals[2]: selected.append("expert")
    if goals[3]: selected.append("skin")
    if goals[4]: selected.append("compare")

    other_filled = goals[5] == 1 and goals[6] is not None

    await callback.message.edit_reply_markup(
        reply_markup=get_goals_keyboard(selected, other_filled))


async def finish_registration(callback: types.CallbackQuery, user_id: int):
    await callback.message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_mini_app_keyboard()
    )


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)