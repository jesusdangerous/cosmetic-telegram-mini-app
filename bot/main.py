from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           WebAppInfo, InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
from dotenv import load_dotenv
import os
import asyncio
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api = os.getenv('YOUR_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
bot = Bot(token=api)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î –≤ –ø–∞–ø–∫–µ bot
db_path = Path(__file__).parent / 'users.db'  # –ü—É—Ç—å –∫ –ë–î –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º
conn = sqlite3.connect(db_path, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        phone TEXT,
        full_name TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_referral_sources (
        user_id INTEGER PRIMARY KEY,
        from_friends INTEGER DEFAULT 0,
        from_ads INTEGER DEFAULT 0,
        choice3 INTEGER DEFAULT 0,
        choice4 INTEGER DEFAULT 0,
        choice5 INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_goals (
        user_id INTEGER PRIMARY KEY,
        analyze_compositions INTEGER DEFAULT 0,
        healthy_lifestyle INTEGER DEFAULT 0,
        expert_communication INTEGER DEFAULT 0,
        skin_improvement INTEGER DEFAULT 0,
        compare_products INTEGER DEFAULT 0,
        other_goal INTEGER DEFAULT 0,
        other_goal_text TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_skin_problems (
        user_id INTEGER PRIMARY KEY,
        allergy INTEGER DEFAULT 0,
        acne INTEGER DEFAULT 0,
        dermatitis INTEGER DEFAULT 0,
        peeling INTEGER DEFAULT 0,
        itching INTEGER DEFAULT 0,
        burning INTEGER DEFAULT 0,
        dryness INTEGER DEFAULT 0,
        pigmentation INTEGER DEFAULT 0,
        no_problems INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_reactive_brands (
        user_id INTEGER PRIMARY KEY,
        loreal INTEGER DEFAULT 0,
        maybelline INTEGER DEFAULT 0,
        nivea INTEGER DEFAULT 0,
        garnier INTEGER DEFAULT 0,
        chanel INTEGER DEFAULT 0,
        dior INTEGER DEFAULT 0,
        esteelauder INTEGER DEFAULT 0,
        lancome INTEGER DEFAULT 0,
        lrp INTEGER DEFAULT 0,
        vichy INTEGER DEFAULT 0,
        natura INTEGER DEFAULT 0,
        blackpearl INTEGER DEFAULT 0,
        other_brand INTEGER DEFAULT 0,
        other_brand_text TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_allergens (
        user_id INTEGER PRIMARY KEY,
        parabens INTEGER DEFAULT 0,
        fragrances INTEGER DEFAULT 0,
        dyes INTEGER DEFAULT 0,
        sulfates INTEGER DEFAULT 0,
        essential_oils INTEGER DEFAULT 0,
        alcohol INTEGER DEFAULT 0,
        photosensitizers INTEGER DEFAULT 0,
        preservatives INTEGER DEFAULT 0,
        proteins INTEGER DEFAULT 0,
        bee_products INTEGER DEFAULT 0,
        other_allergen INTEGER DEFAULT 0,
        other_allergen_text TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
''')
conn.commit()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_phone_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
        KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    )


def get_mini_app_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã",
            web_app=WebAppInfo(url="https://cosmetic-telegram-mini-app.onrender.com/registration")
        )
    )


def get_referral_keyboard(selected_sources=None):
    if selected_sources is None:
        selected_sources = []

    buttons = [
        [
            InlineKeyboardButton(
                "–û—Ç –∑–Ω–∞–∫–æ–º—ã—Ö‚úÖ" if "friends" in selected_sources else "–û—Ç –∑–Ω–∞–∫–æ–º—ã—Ö",
                callback_data="source_friends"
            ),
            InlineKeyboardButton(
                "–†–µ–∫–ª–∞–º–∞‚úÖ" if "ads" in selected_sources else "–†–µ–∫–ª–∞–º–∞",
                callback_data="source_ads"
            )
        ],
        [
            InlineKeyboardButton(
                "Telegram-–∫–∞–Ω–∞–ª—ã‚úÖ" if "choice3" in selected_sources else "Telegram-–∫–∞–Ω–∞–ª—ã",
                callback_data="source_choice3"
            ),
            InlineKeyboardButton(
                "–û–±–∑–æ—Ä—ã –Ω–∞ YouTube‚úÖ" if "choice4" in selected_sources else "–û–±–∑–æ—Ä—ã –Ω–∞ YouTube",
                callback_data="source_choice4"
            )
        ],
        [
            InlineKeyboardButton(
                "Reddit‚úÖ" if "choice5" in selected_sources else "Reddit",
                callback_data="source_choice5"
            )
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="source_continue")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_goals_keyboard(selected_goals=None, other_filled=False):
    if selected_goals is None:
        selected_goals = []

    buttons = [
        [
            InlineKeyboardButton(
                "–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–æ–≤‚úÖ" if "analyze" in selected_goals else "–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–æ–≤",
                callback_data="goal_analyze"
            ),
            InlineKeyboardButton(
                "–ó–û–ñ‚úÖ" if "healthy" in selected_goals else "–ó–û–ñ",
                callback_data="goal_healthy"
            )
        ],
        [
            InlineKeyboardButton(
                "–û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º‚úÖ" if "expert" in selected_goals else "–û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º",
                callback_data="goal_expert"
            ),
            InlineKeyboardButton(
                "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–∂–∏‚úÖ" if "skin" in selected_goals else "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–∂–∏",
                callback_data="goal_skin"
            )
        ],
        [
            InlineKeyboardButton(
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–≤‚úÖ" if "compare" in selected_goals else "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–≤",
                callback_data="goal_compare"
            ),
            InlineKeyboardButton(
                "–î—Ä—É–≥–æ–µ‚úÖ" if other_filled else "–î—Ä—É–≥–æ–µ",
                callback_data="goal_other" if not other_filled else "no_action"
            )
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="goal_continue")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_skin_problems_keyboard(selected_problems=None):
    if selected_problems is None:
        selected_problems = []

    buttons = [
        [
            InlineKeyboardButton(
                "–ê–ª–ª–µ—Ä–≥–∏—è‚úÖ" if "allergy" in selected_problems else "–ê–ª–ª–µ—Ä–≥–∏—è",
                callback_data="skin_allergy"
            ),
            InlineKeyboardButton(
                "–ê–∫–Ω–µ‚úÖ" if "acne" in selected_problems else "–ê–∫–Ω–µ",
                callback_data="skin_acne"
            )
        ],
        [
            InlineKeyboardButton(
                "–î–µ—Ä–º–∞—Ç–∏—Ç‚úÖ" if "dermatitis" in selected_problems else "–î–µ—Ä–º–∞—Ç–∏—Ç",
                callback_data="skin_dermatitis"
            ),
            InlineKeyboardButton(
                "–®–µ–ª—É—à–µ–Ω–∏–µ –∫–æ–∂–∏‚úÖ" if "peeling" in selected_problems else "–®–µ–ª—É—à–µ–Ω–∏–µ –∫–æ–∂–∏",
                callback_data="skin_peeling"
            )
        ],
        [
            InlineKeyboardButton(
                "–ó—É–¥‚úÖ" if "itching" in selected_problems else "–ó—É–¥",
                callback_data="skin_itching"
            ),
            InlineKeyboardButton(
                "–ñ–∂–µ–Ω–∏–µ‚úÖ" if "burning" in selected_problems else "–ñ–∂–µ–Ω–∏–µ",
                callback_data="skin_burning"
            )
        ],
        [
            InlineKeyboardButton(
                "–°—É—Ö–æ—Å—Ç—å‚úÖ" if "dryness" in selected_problems else "–°—É—Ö–æ—Å—Ç—å",
                callback_data="skin_dryness"
            ),
            InlineKeyboardButton(
                "–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è‚úÖ" if "pigmentation" in selected_problems else "–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
                callback_data="skin_pigmentation"
            )
        ],
        [
            InlineKeyboardButton(
                "–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ‚úÖ" if "no_problems" in selected_problems else "–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ",
                callback_data="skin_no_problems"
            )
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="skin_continue")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_reactive_brands_keyboard(selected_brands=None, other_filled=False):
    if selected_brands is None:
        selected_brands = []

    buttons = [
        [
            InlineKeyboardButton(
                "L'Or√©al Paris‚úÖ" if "loreal" in selected_brands else "L'Or√©al Paris",
                callback_data="brand_loreal"
            ),
            InlineKeyboardButton(
                "Maybelline‚úÖ" if "maybelline" in selected_brands else "Maybelline",
                callback_data="brand_maybelline"
            )
        ],
        [
            InlineKeyboardButton(
                "Nivea‚úÖ" if "nivea" in selected_brands else "Nivea",
                callback_data="brand_nivea"
            ),
            InlineKeyboardButton(
                "Garnier‚úÖ" if "garnier" in selected_brands else "Garnier",
                callback_data="brand_garnier"
            )
        ],
        [
            InlineKeyboardButton(
                "Chanel‚úÖ" if "chanel" in selected_brands else "Chanel",
                callback_data="brand_chanel"
            ),
            InlineKeyboardButton(
                "Dior‚úÖ" if "dior" in selected_brands else "Dior",
                callback_data="brand_dior"
            )
        ],
        [
            InlineKeyboardButton(
                "Est√©e Lauder‚úÖ" if "esteelauder" in selected_brands else "Est√©e Lauder",
                callback_data="brand_esteelauder"
            ),
            InlineKeyboardButton(
                "Lanc√¥me‚úÖ" if "lancome" in selected_brands else "Lanc√¥me",
                callback_data="brand_lancome"
            )
        ],
        [
            InlineKeyboardButton(
                "La Roche-Posay‚úÖ" if "lrp" in selected_brands else "La Roche-Posay",
                callback_data="brand_lrp"
            ),
            InlineKeyboardButton(
                "Vichy‚úÖ" if "vichy" in selected_brands else "Vichy",
                callback_data="brand_vichy"
            )
        ],
        [
            InlineKeyboardButton(
                "Natura Siberica‚úÖ" if "natura" in selected_brands else "Natura Siberica",
                callback_data="brand_natura"
            ),
            InlineKeyboardButton(
                "–ß–µ—Ä–Ω—ã–π –ñ–µ–º—á—É–≥‚úÖ" if "blackpearl" in selected_brands else "–ß–µ—Ä–Ω—ã–π –ñ–µ–º—á—É–≥",
                callback_data="brand_blackpearl"
            )
        ],
        [
            InlineKeyboardButton(
                "–î—Ä—É–≥–æ–µ‚úÖ" if other_filled else "–î—Ä—É–≥–æ–µ",
                callback_data="brand_other" if not other_filled else "no_action"
            )
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="brand_continue")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_allergens_keyboard(selected_allergens=None, other_filled=False):
    if selected_allergens is None:
        selected_allergens = []

    buttons = [
        [
            InlineKeyboardButton(
                "–ü–∞—Ä–∞–±–µ–Ω—ã‚úÖ" if "parabens" in selected_allergens else "–ü–∞—Ä–∞–±–µ–Ω—ã",
                callback_data="allergen_parabens"
            ),
            InlineKeyboardButton(
                "–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã‚úÖ" if "fragrances" in selected_allergens else "–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã",
                callback_data="allergen_fragrances"
            )
        ],
        [
            InlineKeyboardButton(
                "–ö—Ä–∞—Å–∏—Ç–µ–ª–∏‚úÖ" if "dyes" in selected_allergens else "–ö—Ä–∞—Å–∏—Ç–µ–ª–∏",
                callback_data="allergen_dyes"
            ),
            InlineKeyboardButton(
                "–°—É–ª—å—Ñ–∞—Ç—ã‚úÖ" if "sulfates" in selected_allergens else "–°—É–ª—å—Ñ–∞—Ç—ã",
                callback_data="allergen_sulfates"
            )
        ],
        [
            InlineKeyboardButton(
                "–≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞‚úÖ" if "essential_oils" in selected_allergens else "–≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞",
                callback_data="allergen_essential_oils"
            ),
            InlineKeyboardButton(
                "–ê–ª–∫–æ–≥–æ–ª—å‚úÖ" if "alcohol" in selected_allergens else "–ê–ª–∫–æ–≥–æ–ª—å",
                callback_data="allergen_alcohol"
            )
        ],
        [
            InlineKeyboardButton(
                "–§–æ—Ç–æ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∞—Ç–æ—Ä—ã‚úÖ" if "photosensitizers" in selected_allergens else "–§–æ—Ç–æ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∞—Ç–æ—Ä—ã",
                callback_data="allergen_photosensitizers"
            ),
            InlineKeyboardButton(
                "–ö–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç—ã‚úÖ" if "preservatives" in selected_allergens else "–ö–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç—ã",
                callback_data="allergen_preservatives"
            )
        ],
        [
            InlineKeyboardButton(
                "–ü—Ä–æ—Ç–µ–∏–Ω—ã‚úÖ" if "proteins" in selected_allergens else "–ü—Ä–æ—Ç–µ–∏–Ω—ã",
                callback_data="allergen_proteins"
            ),
            InlineKeyboardButton(
                "–ü—Ä–æ–¥—É–∫—Ç—ã –ø—á–µ–ª–æ–≤–æ–¥—Å—Ç–≤–∞‚úÖ" if "bee_products" in selected_allergens else "–ü—Ä–æ–¥—É–∫—Ç—ã –ø—á–µ–ª–æ–≤–æ–¥—Å—Ç–≤–∞",
                callback_data="allergen_bee_products"
            )
        ],
        [
            InlineKeyboardButton(
                "–î—Ä—É–≥–æ–µ‚úÖ" if other_filled else "–î—Ä—É–≥–æ–µ",
                callback_data="allergen_other" if not other_filled else "no_action"
            )
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="allergen_continue")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_full_name = State()
    waiting_for_referral_source = State()
    waiting_for_goal = State()
    waiting_for_other_goal_text = State()
    waiting_for_skin_problems = State()
    waiting_for_reactive_brands = State()
    waiting_for_other_brand_text = State()
    waiting_for_allergens = State()
    waiting_for_other_allergen_text = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start'])
async def starting(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state:
            await state.finish()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
                "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –≤ —Å–∏—Å—Ç–µ–º–µ. "
                "–ú–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã:",
                reply_markup=get_mini_app_keyboard()
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤
            cursor.execute("SELECT 1 FROM user_allergens WHERE user_id = ?", (user_id,))
            if not cursor.fetchone():
                cursor.execute("INSERT INTO user_allergens (user_id) VALUES (?)", (user_id,))
                conn.commit()

        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await message.answer(
                "üìù –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞–º –Ω—É–∂–Ω–∞ –≤–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=get_phone_keyboard()
            )
            await RegistrationStates.waiting_for_phone.set()

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message_handler(content_types=types.ContentType.CONTACT, state=RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    try:
        phone_number = message.contact.phone_number
        await state.update_data(phone=phone_number)
        await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:", reply_markup=types.ReplyKeyboardRemove())
        await RegistrationStates.waiting_for_full_name.set()
    except Exception as e:
        print(f"Error in process_phone: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message_handler(state=RegistrationStates.waiting_for_full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    phone_number = data.get('phone')

    cursor.execute("INSERT INTO users (user_id, phone, full_name) VALUES (?, ?, ?)",
                   (user_id, phone_number, full_name))
    cursor.execute("INSERT INTO user_referral_sources (user_id) VALUES (?)", (user_id,))
    cursor.execute("INSERT INTO user_goals (user_id) VALUES (?)", (user_id,))
    cursor.execute("INSERT INTO user_skin_problems (user_id) VALUES (?)", (user_id,))
    cursor.execute("INSERT INTO user_reactive_brands (user_id) VALUES (?)", (user_id,))
    conn.commit()

    await message.answer(
        "üì¢ –û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å?",
        reply_markup=get_referral_keyboard()
    )
    await RegistrationStates.waiting_for_referral_source.set()


@dp.callback_query_handler(lambda c: c.data.startswith('source_'), state=RegistrationStates.waiting_for_referral_source)
async def process_referral_source(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    source_type = callback.data.split('_')[1]

    column_mapping = {
        'friends': 'from_friends',
        'ads': 'from_ads',
        'choice3': 'choice3',
        'choice4': 'choice4',
        'choice5': 'choice5'
    }

    button_names = {
        'friends': '–û—Ç –∑–Ω–∞–∫–æ–º—ã—Ö',
        'ads': '–†–µ–∫–ª–∞–º–∞',
        'choice3': 'Telegram-–∫–∞–Ω–∞–ª—ã',
        'choice4': '–û–±–∑–æ—Ä—ã –Ω–∞ YouTube',
        'choice5': 'Reddit'
    }

    try:
        if source_type == "continue":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω
            cursor.execute("SELECT from_friends, from_ads, choice3, choice4, choice5 FROM user_referral_sources WHERE user_id = ?", (user_id,))
            sources = cursor.fetchone()
            if not any(sources):
                await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫", show_alert=True)
                return

            await callback.message.edit_text("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            await callback.message.answer(
                "üéØ –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
                reply_markup=get_goals_keyboard()
            )
            await RegistrationStates.waiting_for_goal.set()
            await callback.answer()
            return

        db_column = column_mapping.get(source_type)
        if not db_column:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        cursor.execute("""
            SELECT from_friends, from_ads, choice3, choice4, choice5
            FROM user_referral_sources WHERE user_id = ?
        """, (user_id,))
        sources = cursor.fetchone()

        if not sources:
            # –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            cursor.execute("INSERT INTO user_referral_sources (user_id) VALUES (?)", (user_id,))
            conn.commit()
            sources = (0, 0, 0, 0, 0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        current_index = list(column_mapping.keys()).index(source_type)
        current_state = sources[current_index]
        new_state = 0 if current_state else 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        try:
            cursor.execute(f"""
                UPDATE user_referral_sources
                SET {db_column} = ?
                WHERE user_id = ?
            """, (new_state, user_id))
            conn.commit()
        except sqlite3.Error as e:
            conn.rollback()
            print(f"Database error in process_referral_source: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        selected = [
            key for key, idx in zip(column_mapping.keys(), range(5))
            if (sources[idx] if key != source_type else new_state)
        ]

        try:
            await callback.message.edit_reply_markup(
                reply_markup=get_referral_keyboard(selected))
        except Exception as e:
            print(f"Error editing reply markup: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", show_alert=True)
            return

        action = "–≤—ã–±—Ä–∞–Ω" if new_state else "–æ—Ç–º–µ–Ω–µ–Ω"
        await callback.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{button_names.get(source_type)}' {action}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_referral_source: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith('goal_'), state=RegistrationStates.waiting_for_goal)
async def process_goals(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    goal_type = callback.data.split('_')[1]

    if goal_type == "no_action":
        await callback.answer()
        return

    column_mapping = {
        'analyze': 'analyze_compositions',
        'healthy': 'healthy_lifestyle',
        'expert': 'expert_communication',
        'skin': 'skin_improvement',
        'compare': 'compare_products',
        'other': 'other_goal'
    }

    try:
        if goal_type == "continue":
            await callback.message.edit_text("‚úÖ –í–∞—à–∏ —Ü–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            await finish_registration(callback, user_id)
            return

        if goal_type == "other":
            await callback.message.delete()
            msg = await callback.message.answer(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, —Å –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            async with state.proxy() as data:
                data['goal_request_message'] = msg.message_id
            await RegistrationStates.waiting_for_other_goal_text.set()
            await callback.answer()
            return

        db_column = column_mapping.get(goal_type)
        if not db_column:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å", show_alert=True)
            return

        cursor.execute(f"SELECT {db_column} FROM user_goals WHERE user_id = ?", (user_id,))
        current_state = cursor.fetchone()[0]
        new_state = 0 if current_state else 1

        cursor.execute(f"UPDATE user_goals SET {db_column} = ? WHERE user_id = ?",
                       (new_state, user_id))
        conn.commit()

        await update_goals_keyboard(callback, user_id)

        button_names = {
            'analyze': '–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–æ–≤',
            'healthy': '–ó–û–ñ',
            'expert': '–û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º',
            'skin': '–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–∂–∏',
            'compare': '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–æ–≤'
        }
        action = "–≤—ã–±—Ä–∞–Ω–∞" if new_state else "–æ—Ç–º–µ–Ω–µ–Ω–∞"
        await callback.answer(f"–¶–µ–ª—å '{button_names.get(goal_type)}' {action}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@dp.message_handler(state=RegistrationStates.waiting_for_other_goal_text)
async def process_other_goal_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    other_text = message.text

    async with state.proxy() as data:
        if 'goal_request_message' in data:
            try:
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=data['goal_request_message']
                )
            except:
                pass

    await message.delete()

    cursor.execute("""
        UPDATE user_goals
        SET other_goal = 1, other_goal_text = ?
        WHERE user_id = ?
    """, (other_text, user_id))
    conn.commit()

    confirm_msg = await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!")

    cursor.execute("""
        SELECT analyze_compositions, healthy_lifestyle, expert_communication,
               skin_improvement, compare_products, other_goal
        FROM user_goals WHERE user_id = ?
    """, (user_id,))
    goals = cursor.fetchone()

    selected = []
    if goals[0]: selected.append("analyze")
    if goals[1]: selected.append("healthy")
    if goals[2]: selected.append("expert")
    if goals[3]: selected.append("skin")
    if goals[4]: selected.append("compare")

    await message.answer(
        "üéØ –° –∫–∞–∫–æ–π —Ü–µ–ª—å—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
        reply_markup=get_goals_keyboard(selected, other_filled=True)
    )

    await asyncio.sleep(2)
    await confirm_msg.delete()

    await RegistrationStates.waiting_for_goal.set()


@dp.callback_query_handler(lambda c: c.data.startswith('skin_'), state=RegistrationStates.waiting_for_skin_problems)
async def process_skin_problems(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action = callback.data

    if action == "skin_continue":
        await callback.message.edit_text("‚úÖ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await callback.message.answer(
            "–ù–∞ –∫–∞–∫–∏–µ –±—Ä–µ–Ω–¥—ã –∫–æ—Å–º–µ—Ç–∏–∫–∏ —É–∂–µ –±—ã–ª–∞ –≤—ã—è–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è?",
            reply_markup=get_reactive_brands_keyboard()
        )
        await RegistrationStates.waiting_for_reactive_brands.set()
        return

    if action == "skin_no_problems":
        cursor.execute("""
            UPDATE user_skin_problems
            SET allergy = 0, acne = 0, dermatitis = 0, peeling = 0,
                itching = 0, burning = 0, dryness = 0, pigmentation = 0,
                no_problems = 1
            WHERE user_id = ?
        """, (user_id,))
        conn.commit()
        await callback.answer("–í—ã–±—Ä–∞–Ω–æ: –ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ")
    else:
        problem_type = action.split('_')[1]
        column_mapping = {
            'allergy': 'allergy',
            'acne': 'acne',
            'dermatitis': 'dermatitis',
            'peeling': 'peeling',
            'itching': 'itching',
            'burning': 'burning',
            'dryness': 'dryness',
            'pigmentation': 'pigmentation'
        }

        if problem_type not in column_mapping:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
            return

        cursor.execute("UPDATE user_skin_problems SET no_problems = 0 WHERE user_id = ?", (user_id,))
        db_column = column_mapping[problem_type]
        cursor.execute(f"SELECT {db_column} FROM user_skin_problems WHERE user_id = ?", (user_id,))
        current_state = cursor.fetchone()[0]
        new_state = 0 if current_state else 1

        cursor.execute(f"UPDATE user_skin_problems SET {db_column} = ? WHERE user_id = ?",
                       (new_state, user_id))
        conn.commit()

    cursor.execute("""
        SELECT allergy, acne, dermatitis, peeling, itching,
               burning, dryness, pigmentation, no_problems
        FROM user_skin_problems WHERE user_id = ?
    """, (user_id,))
    problems = cursor.fetchone()

    selected = []
    if problems[0]: selected.append("allergy")
    if problems[1]: selected.append("acne")
    if problems[2]: selected.append("dermatitis")
    if problems[3]: selected.append("peeling")
    if problems[4]: selected.append("itching")
    if problems[5]: selected.append("burning")
    if problems[6]: selected.append("dryness")
    if problems[7]: selected.append("pigmentation")
    if problems[8]: selected.append("no_problems")

    await callback.message.edit_reply_markup(
        reply_markup=get_skin_problems_keyboard(selected))


@dp.callback_query_handler(lambda c: c.data.startswith('brand_'), state=RegistrationStates.waiting_for_reactive_brands)
async def process_reactive_brands(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    brand_type = callback.data.split('_')[1]

    column_mapping = {
        'loreal': 'loreal',
        'maybelline': 'maybelline',
        'nivea': 'nivea',
        'garnier': 'garnier',
        'chanel': 'chanel',
        'dior': 'dior',
        'esteelauder': 'esteelauder',
        'lancome': 'lancome',
        'lrp': 'lrp',
        'vichy': 'vichy',
        'natura': 'natura',
        'blackpearl': 'blackpearl',
        'other': 'other_brand'
    }

    try:
        if brand_type == "continue":
            await callback.message.edit_text("‚úÖ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            cursor.execute("INSERT INTO user_allergens (user_id) VALUES (?)", (user_id,))
            conn.commit()
            await callback.message.answer(
                "–ù–∞ —á—Ç–æ –±—ã–ª–∞ –≤—ã—è–≤–ª–µ–Ω–∞ –∞–ª–ª–µ—Ä–≥–∏—è?",
                reply_markup=get_allergens_keyboard()
            )
            await RegistrationStates.waiting_for_allergens.set()
            return

        if brand_type == "no_action":
            await callback.answer()
            return

        if brand_type == "other":
            await callback.message.delete()
            msg = await callback.message.answer(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –±—Ä–µ–Ω–¥—ã —É –≤–∞—Å –±—ã–ª–∞ —Ä–µ–∞–∫—Ü–∏—è:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            async with state.proxy() as data:
                data['brand_request_message'] = msg.message_id
            await RegistrationStates.waiting_for_other_brand_text.set()
            await callback.answer()
            return

        db_column = column_mapping.get(brand_type)
        if not db_column:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥", show_alert=True)
            return

        cursor.execute(f"SELECT {db_column} FROM user_reactive_brands WHERE user_id = ?", (user_id,))
        current_state = cursor.fetchone()[0]
        new_state = 0 if current_state else 1

        cursor.execute(f"UPDATE user_reactive_brands SET {db_column} = ? WHERE user_id = ?",
                       (new_state, user_id))
        conn.commit()

        await update_brands_keyboard(callback, user_id)

        button_names = {
            'loreal': "L'Or√©al Paris",
            'maybelline': "Maybelline New York",
            'nivea': "Nivea",
            'garnier': "Garnier",
            'chanel': "Chanel",
            'dior': "Dior",
            'esteelauder': "Est√©e Lauder",
            'lancome': "Lanc√¥me",
            'lrp': "La Roche-Posay",
            'vichy': "Vichy",
            'natura': "Natura Siberica",
            'blackpearl': "–ß–µ—Ä–Ω—ã–π –ñ–µ–º—á—É–≥"
        }
        action = "–≤—ã–±—Ä–∞–Ω" if new_state else "–æ—Ç–º–µ–Ω–µ–Ω"
        await callback.answer(f"–ë—Ä–µ–Ω–¥ '{button_names.get(brand_type)}' {action}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@dp.message_handler(state=RegistrationStates.waiting_for_other_brand_text)
async def process_other_brand_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    other_text = message.text

    async with state.proxy() as data:
        if 'brand_request_message' in data:
            try:
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=data['brand_request_message']
                )
            except:
                pass

    await message.delete()

    cursor.execute("""
        UPDATE user_reactive_brands
        SET other_brand = 1, other_brand_text = ?
        WHERE user_id = ?
    """, (other_text, user_id))
    conn.commit()

    confirm_msg = await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!")

    cursor.execute("""
        SELECT loreal, maybelline, nivea, garnier, chanel, dior,
               esteelauder, lancome, lrp, vichy, natura, blackpearl,
               other_brand
        FROM user_reactive_brands WHERE user_id = ?
    """, (user_id,))
    brands = cursor.fetchone()

    selected = []
    if brands[0]: selected.append("loreal")
    if brands[1]: selected.append("maybelline")
    if brands[2]: selected.append("nivea")
    if brands[3]: selected.append("garnier")
    if brands[4]: selected.append("chanel")
    if brands[5]: selected.append("dior")
    if brands[6]: selected.append("esteelauder")
    if brands[7]: selected.append("lancome")
    if brands[8]: selected.append("lrp")
    if brands[9]: selected.append("vichy")
    if brands[10]: selected.append("natura")
    if brands[11]: selected.append("blackpearl")

    other_filled = brands[12] == 1

    await message.answer(
        "–ù–∞ –∫–∞–∫–∏–µ –±—Ä–µ–Ω–¥—ã –∫–æ—Å–º–µ—Ç–∏–∫–∏ —É–∂–µ –±—ã–ª–∞ –≤—ã—è–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è?",
        reply_markup=get_reactive_brands_keyboard(selected, other_filled)
    )

    await asyncio.sleep(2)
    await confirm_msg.delete()

    await RegistrationStates.waiting_for_reactive_brands.set()


@dp.callback_query_handler(lambda c: c.data.startswith('allergen_'), state=RegistrationStates.waiting_for_allergens)
async def process_allergens(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    allergen_type = callback.data.split('_')[1]

    column_mapping = {
        'parabens': 'parabens',
        'fragrances': 'fragrances',
        'dyes': 'dyes',
        'sulfates': 'sulfates',
        'essential': 'essential_oils',
        'alcohol': 'alcohol',
        'photosensitizers': 'photosensitizers',
        'preservatives': 'preservatives',
        'proteins': 'proteins',
        'bee': 'bee_products',
        'other': 'other_allergen'
    }

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        cursor.execute("SELECT 1 FROM user_allergens WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            cursor.execute("INSERT INTO user_allergens (user_id) VALUES (?)", (user_id,))
            conn.commit()

        if allergen_type == "continue":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–ª–ª–µ—Ä–≥–µ–Ω –≤—ã–±—Ä–∞–Ω
            cursor.execute("""
                SELECT parabens, fragrances, dyes, sulfates, essential_oils,
                       alcohol, photosensitizers, preservatives, proteins,
                       bee_products, other_allergen
                FROM user_allergens WHERE user_id = ?
            """, (user_id,))
            allergens = cursor.fetchone()

            if not any(allergens):
                await callback.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–ª–ª–µ—Ä–≥–µ–Ω", show_alert=True)
                return

            await callback.message.edit_text("‚úÖ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            await finalize_registration(callback, user_id)
            await state.finish()
            return

        if allergen_type == "no_action":
            await callback.answer()
            return

        if allergen_type == "other":
            await callback.message.delete()
            msg = await callback.message.answer(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã —É –≤–∞—Å –±—ã–ª–∞ —Ä–µ–∞–∫—Ü–∏—è:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            async with state.proxy() as data:
                data['allergen_request_message'] = msg.message_id
            await RegistrationStates.waiting_for_other_allergen_text.set()
            await callback.answer()
            return

        db_column = column_mapping.get(allergen_type)
        if not db_column:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–ª–µ—Ä–≥–µ–Ω", show_alert=True)
            return

        cursor.execute(f"SELECT {db_column} FROM user_allergens WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        current_state = result[0] if result else 0
        new_state = 0 if current_state else 1

        cursor.execute(f"UPDATE user_allergens SET {db_column} = ? WHERE user_id = ?",
                     (new_state, user_id))
        conn.commit()

        await update_allergens_keyboard(callback, user_id)

        button_names = {
            'parabens': '–ü–∞—Ä–∞–±–µ–Ω—ã',
            'fragrances': '–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã',
            'dyes': '–ö—Ä–∞—Å–∏—Ç–µ–ª–∏',
            'sulfates': '–°—É–ª—å—Ñ–∞—Ç—ã',
            'essential': '–≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞',
            'alcohol': '–ê–ª–∫–æ–≥–æ–ª—å',
            'photosensitizers': '–§–æ—Ç–æ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∞—Ç–æ—Ä—ã',
            'preservatives': '–ö–æ–Ω—Å–µ—Ä–≤–∞–Ω—Ç—ã',
            'proteins': '–ü—Ä–æ—Ç–µ–∏–Ω—ã',
            'bee': '–ü—Ä–æ–¥—É–∫—Ç—ã –ø—á–µ–ª–æ–≤–æ–¥—Å—Ç–≤–∞'
        }
        action = "–≤—ã–±—Ä–∞–Ω" if new_state else "–æ—Ç–º–µ–Ω–µ–Ω"
        await callback.answer(f"–ê–ª–ª–µ—Ä–≥–µ–Ω '{button_names.get(allergen_type)}' {action}")

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@dp.message_handler(state=RegistrationStates.waiting_for_other_allergen_text)
async def process_other_allergen_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    other_text = message.text

    async with state.proxy() as data:
        if 'allergen_request_message' in data:
            try:
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=data['allergen_request_message']
                )
            except:
                pass

    await message.delete()

    cursor.execute("""
        UPDATE user_allergens
        SET other_allergen = 1, other_allergen_text = ?
        WHERE user_id = ?
    """, (other_text, user_id))
    conn.commit()

    confirm_msg = await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!")

    cursor.execute("""
        SELECT parabens, fragrances, dyes, sulfates, essential_oils,
               alcohol, photosensitizers, preservatives, proteins,
               bee_products, other_allergen
        FROM user_allergens WHERE user_id = ?
    """, (user_id,))
    allergens = cursor.fetchone()

    selected = []
    if allergens[0]: selected.append("parabens")
    if allergens[1]: selected.append("fragrances")
    if allergens[2]: selected.append("dyes")
    if allergens[3]: selected.append("sulfates")
    if allergens[4]: selected.append("essential_oils")
    if allergens[5]: selected.append("alcohol")
    if allergens[6]: selected.append("photosensitizers")
    if allergens[7]: selected.append("preservatives")
    if allergens[8]: selected.append("proteins")
    if allergens[9]: selected.append("bee_products")

    other_filled = allergens[10] == 1

    await message.answer(
        "–ù–∞ —á—Ç–æ –±—ã–ª–∞ –≤—ã—è–≤–ª–µ–Ω–∞ –∞–ª–ª–µ—Ä–≥–∏—è?",
        reply_markup=get_allergens_keyboard(selected, other_filled)
    )

    await asyncio.sleep(2)
    await confirm_msg.delete()

    await RegistrationStates.waiting_for_allergens.set()


async def update_allergens_keyboard(callback: types.CallbackQuery, user_id: int):
    cursor.execute("""
        SELECT parabens, fragrances, dyes, sulfates, essential_oils,
               alcohol, photosensitizers, preservatives, proteins,
               bee_products, other_allergen, other_allergen_text
        FROM user_allergens WHERE user_id = ?
    """, (user_id,))
    allergens = cursor.fetchone()

    selected = []
    if allergens[0]: selected.append("parabens")
    if allergens[1]: selected.append("fragrances")
    if allergens[2]: selected.append("dyes")
    if allergens[3]: selected.append("sulfates")
    if allergens[4]: selected.append("essential_oils")
    if allergens[5]: selected.append("alcohol")
    if allergens[6]: selected.append("photosensitizers")
    if allergens[7]: selected.append("preservatives")
    if allergens[8]: selected.append("proteins")
    if allergens[9]: selected.append("bee_products")

    other_filled = allergens[10] == 1 and allergens[11] is not None

    await callback.message.edit_reply_markup(
        reply_markup=get_allergens_keyboard(selected, other_filled))


async def update_goals_keyboard(callback: types.CallbackQuery, user_id: int):
    cursor.execute("""
        SELECT analyze_compositions, healthy_lifestyle, expert_communication,
               skin_improvement, compare_products, other_goal, other_goal_text
        FROM user_goals WHERE user_id = ?
    """, (user_id,))
    goals = cursor.fetchone()

    selected = []
    if goals[0]: selected.append("analyze")
    if goals[1]: selected.append("healthy")
    if goals[2]: selected.append("expert")
    if goals[3]: selected.append("skin")
    if goals[4]: selected.append("compare")

    other_filled = goals[5] == 1 and goals[6] is not None

    await callback.message.edit_reply_markup(
        reply_markup=get_goals_keyboard(selected, other_filled))


async def update_brands_keyboard(callback: types.CallbackQuery, user_id: int):
    cursor.execute("""
        SELECT loreal, maybelline, nivea, garnier, chanel, dior,
               esteelauder, lancome, lrp, vichy, natura, blackpearl,
               other_brand, other_brand_text
        FROM user_reactive_brands WHERE user_id = ?
    """, (user_id,))
    brands = cursor.fetchone()

    selected = []
    if brands[0]: selected.append("loreal")
    if brands[1]: selected.append("maybelline")
    if brands[2]: selected.append("nivea")
    if brands[3]: selected.append("garnier")
    if brands[4]: selected.append("chanel")
    if brands[5]: selected.append("dior")
    if brands[6]: selected.append("esteelauder")
    if brands[7]: selected.append("lancome")
    if brands[8]: selected.append("lrp")
    if brands[9]: selected.append("vichy")
    if brands[10]: selected.append("natura")
    if brands[11]: selected.append("blackpearl")

    other_filled = brands[12] == 1 and brands[13] is not None

    await callback.message.edit_reply_markup(
        reply_markup=get_reactive_brands_keyboard(selected, other_filled))


async def finish_registration(callback: types.CallbackQuery, user_id: int):
    await callback.message.answer(
        "–ß—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —É –≤–∞—Å —É–∂–µ –±—ã–ª–æ?",
        reply_markup=get_skin_problems_keyboard()
    )
    await RegistrationStates.waiting_for_skin_problems.set()


async def finalize_registration(callback: types.CallbackQuery, user_id: int):
    await callback.message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É –Ω–∞ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_mini_app_keyboard()
    )


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)